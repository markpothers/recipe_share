// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Recipe List rendering renders correctly when empty with an empty list and a filter button and adds appropriate listeners, then removes listeners when unmounted 1`] = `
<Connect(RecipesList)
  listChoice="all"
  navigation={
    Object {
      "addListener": [MockFunction] {
        "calls": Array [
          Array [
            "focus",
            [Function],
          ],
          Array [
            "blur",
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "navigate": [MockFunction],
      "removeListener": [MockFunction],
    }
  }
  route={
    Object {
      "name": "All Recipes",
    }
  }
>
  <RecipesList
    allRecipeLists={Object {}}
    listChoice="all"
    loggedInChef={
      Object {
        "auth_token": "",
        "id": "",
        "image_url": "",
        "is_admin": false,
        "username": "",
      }
    }
    navigation={
      Object {
        "addListener": [MockFunction] {
          "calls": Array [
            Array [
              "focus",
              [Function],
            ],
            Array [
              "blur",
              [Function],
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "navigate": [MockFunction],
        "removeListener": [MockFunction],
      }
    }
    recipes_details={Object {}}
    route={
      Object {
        "name": "All Recipes",
      }
    }
    storeChefDetails={[Function]}
    storeRecipeDetails={[Function]}
    updateAllRecipeLists={[Function]}
    updateSingleRecipeList={[Function]}
  >
    <SpinachAppContainer
      awaitingServer={false}
    >
      <ForwardRef(SafeAreaView)
        style={
          Object {
            "borderColor": "blue",
            "borderWidth": 0,
            "flex": 1,
          }
        }
      >
        <RCTSafeAreaView
          emulateUnlessSupported={true}
          style={
            Object {
              "borderColor": "blue",
              "borderWidth": 0,
              "flex": 1,
            }
          }
        >
          <RCTSafeAreaView
            emulateUnlessSupported={true}
            style={
              Object {
                "borderColor": "blue",
                "borderWidth": 0,
                "flex": 1,
              }
            }
          >
            <Image
              resizeMode="cover"
              source={1}
              style={
                Object {
                  "borderColor": "black",
                  "borderWidth": 0,
                  "height": 1334,
                  "position": "absolute",
                  "width": 750,
                }
              }
            >
              <Image
                resizeMode="cover"
                source={1}
                style={
                  Object {
                    "borderColor": "black",
                    "borderWidth": 0,
                    "height": 1334,
                    "position": "absolute",
                    "width": 750,
                  }
                }
              />
            </Image>
            <ForwardRef
              activeOpacity={1}
              onPress={[Function]}
            >
              <TouchableOpacity
                activeOpacity={1}
                hostRef={null}
                onPress={[Function]}
              >
                <ForwardRef(AnimatedComponentWrapper)
                  accessible={true}
                  focusable={true}
                  onClick={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Array [
                      undefined,
                      Object {
                        "opacity": 1,
                      },
                    ]
                  }
                >
                  <AnimatedComponent
                    accessible={true}
                    focusable={true}
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        undefined,
                        Object {
                          "opacity": 1,
                        },
                      ]
                    }
                  >
                    <View
                      accessible={true}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Object {
                          "opacity": 1,
                        }
                      }
                    >
                      <View
                        accessible={true}
                        focusable={true}
                        onClick={[Function]}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "opacity": 1,
                          }
                        }
                      >
                        <View
                          style={
                            Object {
                              "alignItems": "center",
                              "justifyContent": "center",
                              "marginTop": 266.8,
                              "position": "absolute",
                              "width": "100%",
                            }
                          }
                        >
                          <View
                            style={
                              Object {
                                "alignItems": "center",
                                "justifyContent": "center",
                                "marginTop": 266.8,
                                "position": "absolute",
                                "width": "100%",
                              }
                            }
                          >
                            <Icon
                              name="gesture-swipe-down"
                              size={66.7}
                              style={
                                Object {
                                  "color": "#fff59b",
                                }
                              }
                            />
                            <Text
                              style={
                                Object {
                                  "color": "#fff59b",
                                  "fontSize": 38.244916147262124,
                                  "fontWeight": "bold",
                                  "textAlign": "center",
                                }
                              }
                            >
                              <Text
                                style={
                                  Object {
                                    "color": "#fff59b",
                                    "fontSize": 38.244916147262124,
                                    "fontWeight": "bold",
                                    "textAlign": "center",
                                  }
                                }
                              >
                                Swipe down to refresh
                              </Text>
                            </Text>
                          </View>
                        </View>
                        <ForwardRef(AnimatedComponentWrapper)
                          ListHeaderComponent={[Function]}
                          data={Array []}
                          initialNumToRender={0}
                          keyExtractor={[Function]}
                          listKey={Array []}
                          nestedScrollEnabled={true}
                          onEndReached={[Function]}
                          onEndReachedThreshold={2.5}
                          onScroll={[Function]}
                          refreshControl={
                            <RefreshControlMock
                              colors={
                                Array [
                                  "#104e01",
                                ]
                              }
                              onRefresh={[Function]}
                              progressBackgroundColor="#fff59b"
                              refreshing={false}
                              tintColor="#fff59b"
                            />
                          }
                          renderItem={[Function]}
                          scrollEventThrottle={16}
                          style={
                            Object {
                              "minHeight": 933.8,
                            }
                          }
                        >
                          <AnimatedComponent
                            ListHeaderComponent={[Function]}
                            data={Array []}
                            forwardedRef={[Function]}
                            initialNumToRender={0}
                            keyExtractor={[Function]}
                            listKey={Array []}
                            nestedScrollEnabled={true}
                            onEndReached={[Function]}
                            onEndReachedThreshold={2.5}
                            onScroll={[Function]}
                            refreshControl={
                              <RefreshControlMock
                                colors={
                                  Array [
                                    "#104e01",
                                  ]
                                }
                                onRefresh={[Function]}
                                progressBackgroundColor="#fff59b"
                                refreshing={false}
                                tintColor="#fff59b"
                              />
                            }
                            renderItem={[Function]}
                            scrollEventThrottle={16}
                            style={
                              Object {
                                "minHeight": 933.8,
                              }
                            }
                          >
                            <FlatList
                              ListHeaderComponent={[Function]}
                              data={Array []}
                              disableVirtualization={false}
                              forwardedRef={[Function]}
                              horizontal={false}
                              initialNumToRender={0}
                              keyExtractor={[Function]}
                              listKey={Array []}
                              maxToRenderPerBatch={10}
                              nestedScrollEnabled={true}
                              numColumns={1}
                              onEndReached={[Function]}
                              onEndReachedThreshold={2.5}
                              onScroll={[Function]}
                              refreshControl={
                                <RefreshControlMock
                                  colors={
                                    Array [
                                      "#104e01",
                                    ]
                                  }
                                  onRefresh={[Function]}
                                  progressBackgroundColor="#fff59b"
                                  refreshing={false}
                                  tintColor="#fff59b"
                                />
                              }
                              removeClippedSubviews={false}
                              renderItem={[Function]}
                              scrollEventThrottle={16}
                              style={
                                Object {
                                  "minHeight": 933.8,
                                }
                              }
                              updateCellsBatchingPeriod={50}
                              windowSize={21}
                            >
                              <VirtualizedList
                                ListHeaderComponent={[Function]}
                                data={Array []}
                                disableVirtualization={false}
                                forwardedRef={[Function]}
                                getItem={[Function]}
                                getItemCount={[Function]}
                                horizontal={false}
                                initialNumToRender={0}
                                keyExtractor={[Function]}
                                listKey={Array []}
                                maxToRenderPerBatch={10}
                                nestedScrollEnabled={true}
                                onEndReached={[Function]}
                                onEndReachedThreshold={2.5}
                                onScroll={[Function]}
                                refreshControl={
                                  <RefreshControlMock
                                    colors={
                                      Array [
                                        "#104e01",
                                      ]
                                    }
                                    onRefresh={[Function]}
                                    progressBackgroundColor="#fff59b"
                                    refreshing={false}
                                    tintColor="#fff59b"
                                  />
                                }
                                removeClippedSubviews={false}
                                renderItem={[Function]}
                                scrollEventThrottle={16}
                                style={
                                  Object {
                                    "minHeight": 933.8,
                                  }
                                }
                                updateCellsBatchingPeriod={50}
                                viewabilityConfigCallbackPairs={Array []}
                                windowSize={21}
                              >
                                <ScrollView
                                  ListHeaderComponent={[Function]}
                                  data={Array []}
                                  disableVirtualization={false}
                                  forwardedRef={[Function]}
                                  getItem={[Function]}
                                  getItemCount={[Function]}
                                  horizontal={false}
                                  initialNumToRender={0}
                                  keyExtractor={[Function]}
                                  listKey={Array []}
                                  maxToRenderPerBatch={10}
                                  nestedScrollEnabled={true}
                                  onContentSizeChange={[Function]}
                                  onEndReached={[Function]}
                                  onEndReachedThreshold={2.5}
                                  onLayout={[Function]}
                                  onMomentumScrollEnd={[Function]}
                                  onScroll={[Function]}
                                  onScrollBeginDrag={[Function]}
                                  onScrollEndDrag={[Function]}
                                  refreshControl={
                                    <RefreshControlMock
                                      colors={
                                        Array [
                                          "#104e01",
                                        ]
                                      }
                                      onRefresh={[Function]}
                                      progressBackgroundColor="#fff59b"
                                      refreshing={false}
                                      tintColor="#fff59b"
                                    />
                                  }
                                  removeClippedSubviews={false}
                                  renderItem={[Function]}
                                  scrollEventThrottle={16}
                                  stickyHeaderIndices={Array []}
                                  style={
                                    Object {
                                      "minHeight": 933.8,
                                    }
                                  }
                                  updateCellsBatchingPeriod={50}
                                  viewabilityConfigCallbackPairs={Array []}
                                  windowSize={21}
                                >
                                  <RCTScrollView
                                    ListHeaderComponent={[Function]}
                                    data={Array []}
                                    disableVirtualization={false}
                                    forwardedRef={[Function]}
                                    getItem={[Function]}
                                    getItemCount={[Function]}
                                    horizontal={false}
                                    initialNumToRender={0}
                                    keyExtractor={[Function]}
                                    listKey={Array []}
                                    maxToRenderPerBatch={10}
                                    nestedScrollEnabled={true}
                                    onContentSizeChange={[Function]}
                                    onEndReached={[Function]}
                                    onEndReachedThreshold={2.5}
                                    onLayout={[Function]}
                                    onMomentumScrollEnd={[Function]}
                                    onScroll={[Function]}
                                    onScrollBeginDrag={[Function]}
                                    onScrollEndDrag={[Function]}
                                    refreshControl={
                                      <RefreshControlMock
                                        colors={
                                          Array [
                                            "#104e01",
                                          ]
                                        }
                                        onRefresh={[Function]}
                                        progressBackgroundColor="#fff59b"
                                        refreshing={false}
                                        tintColor="#fff59b"
                                      />
                                    }
                                    removeClippedSubviews={false}
                                    renderItem={[Function]}
                                    scrollEventThrottle={16}
                                    stickyHeaderIndices={Array []}
                                    style={
                                      Object {
                                        "minHeight": 933.8,
                                      }
                                    }
                                    updateCellsBatchingPeriod={50}
                                    viewabilityConfigCallbackPairs={Array []}
                                    windowSize={21}
                                  >
                                    <RCTScrollView
                                      ListHeaderComponent={[Function]}
                                      data={Array []}
                                      disableVirtualization={false}
                                      forwardedRef={[Function]}
                                      getItem={[Function]}
                                      getItemCount={[Function]}
                                      horizontal={false}
                                      initialNumToRender={0}
                                      keyExtractor={[Function]}
                                      listKey={Array []}
                                      maxToRenderPerBatch={10}
                                      nestedScrollEnabled={true}
                                      onContentSizeChange={[Function]}
                                      onEndReached={[Function]}
                                      onEndReachedThreshold={2.5}
                                      onLayout={[Function]}
                                      onMomentumScrollEnd={[Function]}
                                      onScroll={[Function]}
                                      onScrollBeginDrag={[Function]}
                                      onScrollEndDrag={[Function]}
                                      refreshControl={
                                        <RefreshControlMock
                                          colors={
                                            Array [
                                              "#104e01",
                                            ]
                                          }
                                          onRefresh={[Function]}
                                          progressBackgroundColor="#fff59b"
                                          refreshing={false}
                                          tintColor="#fff59b"
                                        />
                                      }
                                      removeClippedSubviews={false}
                                      renderItem={[Function]}
                                      scrollEventThrottle={16}
                                      stickyHeaderIndices={Array []}
                                      style={
                                        Object {
                                          "minHeight": 933.8,
                                        }
                                      }
                                      updateCellsBatchingPeriod={50}
                                      viewabilityConfigCallbackPairs={Array []}
                                      windowSize={21}
                                    >
                                      <RefreshControlMock
                                        colors={
                                          Array [
                                            "#104e01",
                                          ]
                                        }
                                        onRefresh={[Function]}
                                        progressBackgroundColor="#fff59b"
                                        refreshing={false}
                                        tintColor="#fff59b"
                                      >
                                        <RCTRefreshControl>
                                          <RCTRefreshControl />
                                        </RCTRefreshControl>
                                      </RefreshControlMock>
                                      <View>
                                        <View>
                                          <VirtualizedCellWrapper
                                            cellKey="rootList-header"
                                            key="$header"
                                          >
                                            <View
                                              onLayout={[Function]}
                                            >
                                              <View
                                                onLayout={[Function]}
                                              >
                                                <ListHeaderComponent>
                                                  <ForwardRef
                                                    onPress={[Function]}
                                                    style={
                                                      Object {
                                                        "height": 933.8,
                                                      }
                                                    }
                                                  >
                                                    <TouchableOpacity
                                                      hostRef={null}
                                                      onPress={[Function]}
                                                      style={
                                                        Object {
                                                          "height": 933.8,
                                                        }
                                                      }
                                                    >
                                                      <ForwardRef(AnimatedComponentWrapper)
                                                        accessible={true}
                                                        focusable={true}
                                                        onClick={[Function]}
                                                        onResponderGrant={[Function]}
                                                        onResponderMove={[Function]}
                                                        onResponderRelease={[Function]}
                                                        onResponderTerminate={[Function]}
                                                        onResponderTerminationRequest={[Function]}
                                                        onStartShouldSetResponder={[Function]}
                                                        style={
                                                          Array [
                                                            Object {
                                                              "height": 933.8,
                                                            },
                                                            Object {
                                                              "opacity": 1,
                                                            },
                                                          ]
                                                        }
                                                      >
                                                        <AnimatedComponent
                                                          accessible={true}
                                                          focusable={true}
                                                          onClick={[Function]}
                                                          onResponderGrant={[Function]}
                                                          onResponderMove={[Function]}
                                                          onResponderRelease={[Function]}
                                                          onResponderTerminate={[Function]}
                                                          onResponderTerminationRequest={[Function]}
                                                          onStartShouldSetResponder={[Function]}
                                                          style={
                                                            Array [
                                                              Object {
                                                                "height": 933.8,
                                                              },
                                                              Object {
                                                                "opacity": 1,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <View
                                                            accessible={true}
                                                            focusable={true}
                                                            onClick={[Function]}
                                                            onResponderGrant={[Function]}
                                                            onResponderMove={[Function]}
                                                            onResponderRelease={[Function]}
                                                            onResponderTerminate={[Function]}
                                                            onResponderTerminationRequest={[Function]}
                                                            onStartShouldSetResponder={[Function]}
                                                            style={
                                                              Object {
                                                                "height": 933.8,
                                                                "opacity": 1,
                                                              }
                                                            }
                                                          >
                                                            <View
                                                              accessible={true}
                                                              focusable={true}
                                                              onClick={[Function]}
                                                              onResponderGrant={[Function]}
                                                              onResponderMove={[Function]}
                                                              onResponderRelease={[Function]}
                                                              onResponderTerminate={[Function]}
                                                              onResponderTerminationRequest={[Function]}
                                                              onStartShouldSetResponder={[Function]}
                                                              style={
                                                                Object {
                                                                  "height": 933.8,
                                                                  "opacity": 1,
                                                                }
                                                              }
                                                            >
                                                              <PressabilityDebugView
                                                                color="cyan"
                                                              />
                                                            </View>
                                                          </View>
                                                        </AnimatedComponent>
                                                      </ForwardRef(AnimatedComponentWrapper)>
                                                    </TouchableOpacity>
                                                  </ForwardRef>
                                                </ListHeaderComponent>
                                              </View>
                                            </View>
                                          </VirtualizedCellWrapper>
                                        </View>
                                      </View>
                                    </RCTScrollView>
                                  </RCTScrollView>
                                </ScrollView>
                              </VirtualizedList>
                            </FlatList>
                          </AnimatedComponent>
                        </ForwardRef(AnimatedComponentWrapper)>
                        <PressabilityDebugView
                          color="cyan"
                        />
                      </View>
                    </View>
                  </AnimatedComponent>
                </ForwardRef(AnimatedComponentWrapper)>
              </TouchableOpacity>
            </ForwardRef>
            <ForwardRef
              activeOpacity={0.7}
              onPress={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#fff59b",
                  "borderColor": "#104e01",
                  "borderRadius": 11.25,
                  "borderStyle": "solid",
                  "borderWidth": 1,
                  "bottom": 53.36,
                  "height": 106.72,
                  "justifyContent": "center",
                  "position": "absolute",
                  "right": 53.36,
                  "width": 106.72,
                  "zIndex": 1,
                }
              }
              testID="filterButton"
            >
              <TouchableOpacity
                activeOpacity={0.7}
                hostRef={null}
                onPress={[Function]}
                style={
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#fff59b",
                    "borderColor": "#104e01",
                    "borderRadius": 11.25,
                    "borderStyle": "solid",
                    "borderWidth": 1,
                    "bottom": 53.36,
                    "height": 106.72,
                    "justifyContent": "center",
                    "position": "absolute",
                    "right": 53.36,
                    "width": 106.72,
                    "zIndex": 1,
                  }
                }
                testID="filterButton"
              >
                <ForwardRef(AnimatedComponentWrapper)
                  accessible={true}
                  focusable={true}
                  onClick={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Array [
                      Object {
                        "alignItems": "center",
                        "backgroundColor": "#fff59b",
                        "borderColor": "#104e01",
                        "borderRadius": 11.25,
                        "borderStyle": "solid",
                        "borderWidth": 1,
                        "bottom": 53.36,
                        "height": 106.72,
                        "justifyContent": "center",
                        "position": "absolute",
                        "right": 53.36,
                        "width": 106.72,
                        "zIndex": 1,
                      },
                      Object {
                        "opacity": 1,
                      },
                    ]
                  }
                  testID="filterButton"
                >
                  <AnimatedComponent
                    accessible={true}
                    focusable={true}
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        Object {
                          "alignItems": "center",
                          "backgroundColor": "#fff59b",
                          "borderColor": "#104e01",
                          "borderRadius": 11.25,
                          "borderStyle": "solid",
                          "borderWidth": 1,
                          "bottom": 53.36,
                          "height": 106.72,
                          "justifyContent": "center",
                          "position": "absolute",
                          "right": 53.36,
                          "width": 106.72,
                          "zIndex": 1,
                        },
                        Object {
                          "opacity": 1,
                        },
                      ]
                    }
                    testID="filterButton"
                  >
                    <View
                      accessible={true}
                      focusable={true}
                      onClick={[Function]}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Object {
                          "alignItems": "center",
                          "backgroundColor": "#fff59b",
                          "borderColor": "#104e01",
                          "borderRadius": 11.25,
                          "borderStyle": "solid",
                          "borderWidth": 1,
                          "bottom": 53.36,
                          "height": 106.72,
                          "justifyContent": "center",
                          "opacity": 1,
                          "position": "absolute",
                          "right": 53.36,
                          "width": 106.72,
                          "zIndex": 1,
                        }
                      }
                      testID="filterButton"
                    >
                      <View
                        accessible={true}
                        focusable={true}
                        onClick={[Function]}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "alignItems": "center",
                            "backgroundColor": "#fff59b",
                            "borderColor": "#104e01",
                            "borderRadius": 11.25,
                            "borderStyle": "solid",
                            "borderWidth": 1,
                            "bottom": 53.36,
                            "height": 106.72,
                            "justifyContent": "center",
                            "opacity": 1,
                            "position": "absolute",
                            "right": 53.36,
                            "width": 106.72,
                            "zIndex": 1,
                          }
                        }
                        testID="filterButton"
                      >
                        <Icon
                          name="filter"
                          size={46.690000000000005}
                          style={
                            Object {
                              "color": "#104e01",
                            }
                          }
                        />
                        <PressabilityDebugView
                          color="cyan"
                        />
                      </View>
                    </View>
                  </AnimatedComponent>
                </ForwardRef(AnimatedComponentWrapper)>
              </TouchableOpacity>
            </ForwardRef>
          </RCTSafeAreaView>
        </RCTSafeAreaView>
      </ForwardRef(SafeAreaView)>
    </SpinachAppContainer>
  </RecipesList>
</Connect(RecipesList)>
`;
